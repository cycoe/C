** Chapter 1
int divide int get an int, and the variable b is a common mistake that you may
make. You divide an int with an int, but assign it to a float. There is an
implicit type conversion.
#+begin_src C
  #include <stdio.h>

  int main(int argc, char *argv[])
  {
    float a, b;
    a = (float) (25 / 10);
    b = (25 / 10);
    printf("a is %f, b is %f\n", a, b);
    return 0;
  }
#+end_src
#+RESULTS:
| a is 2.000000 | b is 2.000000 |
** Chapter 2
Caution about the side effect!
+ We cannot figure out the order of the function calling in an expression. So
  when there is a side effect, the answer will out of our control
+ Tell the difference between func1 and func2. When we declare a static variable
  in a function, then call this function several times, the static variable will
  only be initiated one time. And the assignment will also only be called one
  time.
#+begin_src C
  #include <stdio.h>

  int func1(void) {
    static int a;
    a = 1;
    return ++a;
  }

  int func2(void) {
    static int a = 1;
    return ++a;
  }

  int main(int argc, char *argv[])
  {
    int answer;
    answer = func1() - func1() * func1();
    printf("func1 is %d\n", answer);
    answer = func2() - func2() * func2();
    printf("func2 is %d\n", answer);
    return 0;
  }
#+end_src
#+RESULTS:
| func1 | is |  -2 |
| func2 | is | -10 |
** Chapter 5
#+begin_src C
  int main(int argc, char *argv[])
  {
    unsigned year = 2100;
    unsigned leap_year = !(year % 400) || (!(year % 4) && (year % 100));
    printf("%u is %sa leap year!\n", year, leap_year? "": "not ");
    return 0;
  }
#+end_src
#+RESULTS:
: 2100 is not a leap year!
** Chapter 9
*** Search the first specific charactor in a string
#+begin_src C
  #include <stdio.h>
  #include <string.h>

  int main(int argc, char *argv[])
  {
    char string[20] = "Hello there.";
    char *search = strchr(string, 'h');
    if (search)
      printf("The index of first 'h' is %d\n", search - string);
    return 0;
  }
#+end_src
#+RESULTS:
: The index of first 'h' is 7
*** Search the first charactor of a group in a string 
#+begin_src C
  #include <stdio.h>
  #include <string.h>

  int main(int argc, char *argv[])
  {
    char string[20] = "Hello there.";
    char *search = strpbrk(string, "aeiou");
    if (search)
      printf("The index of first 'aeiou' is %d\n", search - string);
    return 0;
  }
#+end_src
#+RESULTS:
: The index of first 'aeiou' is 1
*** Search a substring
#+begin_src C
  #include <stdio.h>
  #include <string.h>

  int main(int argc, char *argv[])
  {
    char string[20] = "Hello there.";
    char *search = strstr(string, "there");
    if (search)
      printf("The index of substring 'there' is %d\n", search - string);
    return 0;
  }
#+end_src
#+RESULTS:
: The index of substring 'there' is 6
** Chapter 10
#+begin_src C
  #include <stdio.h>

  struct {
    // 此处使用 int 会出问题，应使用无符号类型
    int a: 2;
    unsigned b: 2;
  } x;

  int main(int argc, char *argv[])
  {
    x.a = 1;
    x.a += 1;
    printf("%p\n", (int*) x.a);
    x.b = 1;
    x.b += 1;
    printf("%p\n", (int*) x.b);
    return 0;
  }
#+end_src
#+RESULTS:
| 0xfffffffffffffffe |
|                0x2 |
** Chapter 14
*** 3
#+BEGIN_SRC C
  #include <stdio.h>

  /* #eq 将 eq 作为字符串 */
  #define RUN(eq)              \
    printf("run '"#eq"'\n");   \
    (#eq);                     \

  int main(int argc, char *argv[])
  {
    int a = 1, b = 2;
    RUN(a + b);
    return 0;
  }
#+END_SRC
#+RESULTS:
: run 'a + b'
** Chapter 16
*** 常用数学函数
#+BEGIN_SRC C
  #include <stdio.h>
  #include <stdlib.h>
  #include <math.h>
  #include <time.h>

  int main(int argc, char *argv[])
  {
    printf("\n/*            整型函数          */\n");
    int a = abs(-1);
    long b = labs(-1);
    div_t c = div(3, 5);
    printf("quot is %d, rem is %d\n", c.quot, c.rem);

    printf("\n/*              随机数          */\n");
    /* 指定随机种子 */
    srand((unsigned) time(NULL));
    /* 生成 10 到 20 的随机数 */
    printf("A random number between 10 and 20 is %d\n", rand() % 10 + 10);

    printf("\n/*            字符串转换        */\n");
    printf("%d\n", atoi("1234"));
    printf("%ld\n", atol("1234567890"));
    /* 以 16 进制转换字符串为 10 进制数 */
    printf("%ld\n", strtol("123adf", NULL, 16));
    printf("%lf\n", atof("123.456"));

    printf("\n/*            数学函数          */\n");
    /* 以弧度表示 */
    printf("sin(pi/2) = %lf, cos(1) = %lf\n", sin(3.14 / 2), cos(1));
    printf("e^3 = %lf, ln(2) = %lf, log_10(1000) = %lf\n", exp(3), log(2), log10(1000));
    printf("2^2.5 = %lf, 2^0.5 = %lf\n", pow(2, 2.5), sqrt(2));
    return 0;
  }
#+END_SRC
#+RESULTS:
| /*         | 整型函数   | */         |         |    |           |              |    |     |
| quot       | is         | 0,         | rem     | is |         3 |              |    |     |
| /*         | 随机数     | */         |         |    |           |              |    |     |
| A          | random     | number     | between | 10 |       and |           20 | is |  13 |
| /*         | 字符串转换 | */         |         |    |           |              |    |     |
| 1234       |            |            |         |    |           |              |    |     |
| 1234567890 |            |            |         |    |           |              |    |     |
| 1194719    |            |            |         |    |           |              |    |     |
| 123.456    |            |            |         |    |           |              |    |     |
| /*         | 数学函数   | */         |         |    |           |              |    |     |
| sin(pi/2)  | =          | 1.000000,  | cos(1)  | =  |  0.540302 |              |    |     |
| e^3        | =          | 20.085537, | ln(2)   | =  | 0.693147, | log_10(1000) | =  | 3.0 |
| 2^2.5      | =          | 5.656854,  | 2^0.5   | =  |  1.414214 |              |    |     |
*** 时间
#+BEGIN_SRC C
  #include <stdio.h>
  #include <time.h>
  #include <stdlib.h>

  char *WEEK[7] = {
    "Sun.", "Mon.", "Tue.", "Wed.", "Thur.", "Fri.", "Sat."
  };

  int main(int argc, char *argv[])
  {
    /* CPU tick-tok */
    clock_t clock_start = clock();
    printf("CPU tick-tok is %ld\n", clock_start);

    /* 时间戳 */
    time_t current_time;
    /* 以下两种方法都可以，当时间超过 time_t 的范围时函数返回 -1 */
    current_time = time(NULL);
    if(time(&current_time) != -1) {
      printf("current time stamp is %ld\n", current_time);
    } else {
      printf("time is to long to store\n");
    }

    /* 时间转换为字符串 */
    char * time_string = ctime(&current_time);
    printf("current time is %s\n", time_string);

    /* 计算两次的时间差(秒)
     ,* 直接计算两次 time 的差可能得不到正确的结果，因为 time 的返回值不一定是秒
     ,*/
    double time_diff = difftime(time(NULL), current_time);
    printf("time diff is %lf\n", time_diff);

    /* 转换为时间结构体 */
    struct tm *utc_time = gmtime(&current_time); // 世界协调时
    struct tm *local_time = localtime(&current_time); // 本地时间
    printf("%d-%02d-%02d %02d:%02d:%02d\n",
           utc_time->tm_year + 1900,
           utc_time->tm_mon + 1,
           utc_time->tm_mday,
           utc_time->tm_hour,
           utc_time->tm_min,
           utc_time->tm_sec);

    /* 将 tm 结构体转换为字符串 */
    time_string = asctime(local_time);
    printf("current time is %s\n", time_string);

    /* 格式化事时间 */
    char buff[1024] = {0};
    size_t string_len = strftime(buff, 1024, "%b. %d(%w) %H:%M:%S", local_time);
    if (string_len != -1){
      printf("%s\n", buff);
    }

    /* 将 tm 结构转化为 time_t */
    local_time->tm_year = 2020 - 1900;
    local_time->tm_mon = 11;
    local_time->tm_mday = 6;
    time_t time_again = mktime(local_time);
    printf("time stamp of 2020-12-06 is %ld\n", time_again);
    /* 在 mktime 之后 tm 结构体会被规格化，因此可以保证其他成员的值是正确的 */
    printf("2020-12-06 is the %dth. day of the week, the %dth. day of the year\n",
           local_time->tm_wday + 1, local_time->tm_yday + 1);

    return 0;
  }
#+END_SRC
#+RESULTS:
| CPU        | tick-tok | is       | 639        |            |            |          |       |     |        |     |    |     |      |
| current    | time     | stamp    | is         | 1580872444 |            |          |       |     |        |     |    |     |      |
| current    | time     | is       | Wed        | Feb        |          5 | 11:14:04 |  2020 |     |        |     |    |     |      |
| time       | diff     | is       | 0.0        |            |            |          |       |     |        |     |    |     |      |
| 2020-02-05 | 11:14:04 |          |            |            |            |          |       |     |        |     |    |     |      |
| current    | time     | is       | Wed        | Feb        |          5 | 11:14:04 |  2020 |     |        |     |    |     |      |
| Feb.       | 05(3)    | 11:14:04 |            |            |            |          |       |     |        |     |    |     |      |
| time       | stamp    | of       | 2020-12-06 | is         | 1607224444 |          |       |     |        |     |    |     |      |
| 2020-12-06 | is       | the      | 1th.       | day        |         of |      the | week, | the | 341th. | day | of | the | year |
*** 信号
#+BEGIN_SRC C
  #include <stdio.h>
  #include <signal.h>

  void handler(int sig) {
    printf("signal is %d\n", sig);
  }

  int main(int argc, char *argv[])
  {
    void (*old)(int) = signal(SIGINT, handler);
    printf("Run old handler\n");
    old(SIGINT);
    return 0;
  }
#+END_SRC
#+RESULTS:
